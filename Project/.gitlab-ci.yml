# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4
        
before_script:
  - echo "starting build for xvtBatteryCuda library"
  - echo "Restoring NuGet Packages..."
  - nuget.exe restore .\xvtBatteryCuda.sln
  - set vspath ";C:\Program Files (x86)\Microsoft Visual Studio\Installer;"
  - $Env:path += $vspath
  - $path = vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin | select-object -first 1
  - $Env:path +=$path
  - if ($path -like "*\2022\*") {$TOOLSET="v143"} elseif ($path -like "*\2019\*") {$TOOLSET="v142"} elseif ($path -like "*\2017\*") {$TOOLSET="v141"} elseif ($path -like "*\2015\*") {$TOOLSET="v140"} elseif ($path -like "*\2013\*") {$TOOLSET="v120"} elseif ($path -like "*\2012\*") {$TOOLSET="v110"} else {Write-Host "Can not find Toolset"}
  - echo $TOOLSET

stages:          # List of stages for jobs, and their order of execution
  - build
  - test

build-debug-x64-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - shell, OPENCV-480
  script:
    - echo "Debug x64 build..."
    - msbuild /maxcpucount /nologo /p:Configuration=Debug /p:Platform=x64 /p:PlatformToolset=$TOOLSET .\xvtBatteryCuda.sln | Select-String 'Build succeeded|failed|Error |Warning\(s\)|Error\(s\)|Time Elapsed'
  artifacts:
    paths:
      - XavisTech/
      - x64/Debug/

build-release-x64-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
    - shell, OPENCV-480
  script:
    - echo "Release x64 build..."
    - msbuild /maxcpucount /nologo /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=$TOOLSET .\xvtBatteryCuda.sln | Select-String 'Build succeeded|failed|Error |Warning\(s\)|Error\(s\)|Time Elapsed'
  artifacts:
    paths:
      - XavisTech/
      - x64/Release/

#build-debug-Win32-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  tags:
#  - shell
#  script:
#  - echo "Debug Win32 build..."
#  - msbuild /maxcpucount /nologo /p:Configuration=Debug /p:Platform=x86 /p:PlatformToolset=$TOOLSET .\xvtBatteryCuda.sln | Select-String 'Build succeeded|failed|Error |Warning\(s\)|Error\(s\)|Time Elapsed'
#  artifacts:
#    paths:
#      - install/
#      - Win32/Debug/

#build-release-Win32-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  tags:
#  - shell
#  script:
#  - echo "Release Win32 build..."
#  - msbuild /maxcpucount /nologo /p:Configuration=Release /p:Platform=x86 /p:PlatformToolset=$TOOLSET .\xvtBatteryCuda.sln | Select-String 'Build succeeded|failed|Error |Warning\(s\)|Error\(s\)|Time Elapsed'
#  artifacts:
#    paths:
#      - install/
#      - Win32/Release/

unit-test-debug-x64-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - shell, OPENCV-480
  needs:
    - job: build-debug-x64-job
  before_script:
    - $Env:path += (";{0}\x64;"-f $Env:OPENCV_480)
  script:
    - echo "Starting unit test for bebug x64 build"
    - $opencvBinDir = (";{0}\x64;" -f $Env:OPENCV_480)
    - $openMXMLDir = (";{0}\lib\x64\Debug;" -f $Env:MXML)
    - $openZLIBDir = (";{0}\lib\x64\Debug;" -f $Env:ZLIB)
    - echo $opencvBinDir, $openMXMLDir, $openZLIBDir
    - $Env:path += $opencvBinDir
    - $Env:path += $openMXMLDir
    - $Env:path += $openZLIBDir
    - .\x64\Debug\testCuda.exe --gtest_output="xml:unit-test-debug-x64.xml"
  artifacts:
    when: always
    reports:
      junit: ./unit-test-debug-x64.xml

unit-test-release-x64-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
    - shell, OPENCV-480
  needs:
    - job: build-release-x64-job
  before_script:
    - $Env:path += (";{0}\x64;"-f $Env:OPENCV_480)
  script:
    - echo "Starting unit test for release x64 build"
    - $opencvBinDir = (";{0}\x64;" -f $Env:OPENCV_480)
    - $openMXMLDir = (";{0}\lib\x64\Release;" -f $Env:MXML)
    - $openZLIBDir = (";{0}\lib\x64\Release;" -f $Env:ZLIB)
    - echo $opencvBinDir, $openMXMLDir, $openZLIBDir
    - $Env:path += $opencvBinDir
    - $Env:path += $openMXMLDir
    - $Env:path += $openZLIBDir

    - .\x64\Release\testCuda.exe --gtest_output="xml:unit-test-release-x64.xml"
  artifacts:
    when: always
    reports:
      junit: ./unit-test-release-x64.xml


#unit-test-debug-Win32-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  tags:
#  - shell
#  needs:
#    - job: build-debug-Win32-job
#  script:
#  - echo "Starting unit test for bebug Win32 build"
#  - .\Win32\Debug\testCuda.exe

#unit-test-release-Win32-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  tags:
#  - shell
#  needs:
#  - job: build-release-Win32-job
#  script:
#  - echo "Starting unit test for release Win32 build"
#  - .\Win32\Release\testCuda.exe